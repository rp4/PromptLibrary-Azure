generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(cuid())
  email                String           @unique
  hashedPassword       String?
  role                 String           @default("user")
  name                 String?
  emailVerified        DateTime?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  accounts             Account[]
  likes                Like[]
  promptUsageLogs      PromptUsageLog[]
  legacyPromptsCreated LegacyPrompt[]   @relation("UserLegacyPrompts")
  sessions             Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Prompt {
  id              String   @id @default(cuid())
  title           String
  prompt_text     String   @db.Text
  notes           String?  @db.Text
  favorites_count Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  createdById     String
}

model LLMConfiguration {
  id                 String   @id @default(cuid())
  config_name        String
  api_type           String
  api_base_url       String?
  api_key_env_var    String
  model_name         String
  default_parameters String?
  is_active          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Group {
  id            String         @id @default(cuid())
  name          String         @db.VarChar(255)
  order_id      Int?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  legacyPrompts LegacyPrompt[] @relation("GroupLegacyPrompts")
  subgroups     Subgroup[]

  @@map("groups")
}

model Subgroup {
  id            String         @id @default(cuid())
  name          String         @db.VarChar(255)
  order_id      Int?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  groupId       String         @map("group_id")
  legacyPrompts LegacyPrompt[] @relation("SubgroupLegacyPrompts")
  group         Group          @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("subgroups")
}

model LegacyPrompt {
  id              String   @id @default(cuid())
  title           String   @db.VarChar(255)
  prompt_text     String   @db.Text
  notes           String?  @db.Text
  metadata        String?  @db.Text
  favorites_count Int      @default(0) @map("favorites_count")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  groupId         String   @map("group_id")
  subgroupId      String   @map("subgroup_id")
  createdById     String   @map("created_by")
  likes           Like[]
  creator         User     @relation("UserLegacyPrompts", fields: [createdById], references: [id], onUpdate: NoAction)
  group           Group    @relation("GroupLegacyPrompts", fields: [groupId], references: [id], onUpdate: NoAction)
  subgroup        Subgroup @relation("SubgroupLegacyPrompts", fields: [subgroupId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("prompts")
}

model Like {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  deletedAt      DateTime?    @map("deleted_at")
  userId         String       @map("user_id")
  legacyPromptId String       @map("prompt_id")
  legacyPrompt   LegacyPrompt @relation(fields: [legacyPromptId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("likes")
}

model PromptUsageLog {
  run_id      String   @id @default(cuid()) @map("run_id")
  prompt_name String?  @map("prompt_name") @db.Text
  start_time  DateTime @map("start_time")
  end_time    DateTime @map("end_time")
  duration_ms Int?     @map("duration_ms")
  input_data  String?  @map("input_data") @db.Text
  output_data String?  @map("output_data") @db.Text
  logged_at   DateTime @default(now()) @map("logged_at")
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@map("prompt_usage_log")
}
